services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: adagri_postgres_prod
    environment:
      POSTGRES_DB: adagri_db
      POSTGRES_USER: adagri_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-adagri_pass_change_me}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - adagri_network_prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U adagri_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Laravel API (Backend)
  app:
    build:
      context: ./api
      dockerfile: Dockerfile.prod
    container_name: adagri_app_prod
    environment:
      APP_ENV: production
      APP_DEBUG: "false"
      DB_CONNECTION: pgsql
      DB_HOST: postgres
      DB_PORT: 5432
      DB_DATABASE: adagri_db
      DB_USERNAME: adagri_user
      DB_PASSWORD: ${POSTGRES_PASSWORD:-adagri_pass_change_me}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - adagri_network_prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "php-fpm -t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Vue Frontend (SPA)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: adagri_frontend_prod
    networks:
      - adagri_network_prod
    restart: unless-stopped

  # Nginx (Reverse Proxy & Load Balancer)
  nginx:
    image: nginx:alpine
    container_name: adagri_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/conf.d/default.conf:ro
      # Descomentar quando tiver certificado SSL
      # - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
      - frontend
    networks:
      - adagri_network_prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# =============================================================================
# Networks
# =============================================================================
networks:
  adagri_network_prod:
    driver: bridge

# =============================================================================
# Volumes
# =============================================================================
volumes:
  postgres_data_prod:
    driver: local
